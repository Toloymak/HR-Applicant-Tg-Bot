// <auto-generated />
using System;
using DataLayer.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(HrBotContext))]
    partial class AppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataLayer.Dals.AnswerDal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AnswerText")
                        .HasColumnType("text");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserApplicationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserApplicationId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("DataLayer.Dals.BotUserDal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CustomName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TgId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TgName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BotUsers");
                });

            modelBuilder.Entity("DataLayer.Dals.ConditionDal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CriticalText")
                        .HasColumnType("text");

                    b.Property<bool>("IsCritical")
                        .HasColumnType("boolean");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Conditions");
                });

            modelBuilder.Entity("DataLayer.Dals.QuestionDal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Answer")
                        .HasColumnType("integer");

                    b.Property<Guid?>("NextQuestionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NextQuestionId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("DataLayer.Dals.UserApplicationDal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastQuestionId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("UserAnswer")
                        .HasColumnType("text");

                    b.Property<Guid>("VacationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LastQuestionId");

                    b.HasIndex("VacationId");

                    b.ToTable("UserApplications");
                });

            modelBuilder.Entity("DataLayer.Dals.VacancyDal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DefaultRejectText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FinishedApplicationText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("HrId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RootQuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RootQuestionId");

                    b.ToTable("Vacations");
                });

            modelBuilder.Entity("Shared.Models.Condition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CriticalText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCritical")
                        .HasColumnType("boolean");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Condition");
                });

            modelBuilder.Entity("Shared.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Answer")
                        .HasColumnType("integer");

                    b.Property<Guid>("NextQuestionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("DataLayer.Dals.AnswerDal", b =>
                {
                    b.HasOne("DataLayer.Dals.QuestionDal", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Dals.UserApplicationDal", "UserApplication")
                        .WithMany("Answers")
                        .HasForeignKey("UserApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("UserApplication");
                });

            modelBuilder.Entity("DataLayer.Dals.ConditionDal", b =>
                {
                    b.HasOne("DataLayer.Dals.QuestionDal", "Question")
                        .WithMany("Conditions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("DataLayer.Dals.QuestionDal", b =>
                {
                    b.HasOne("DataLayer.Dals.QuestionDal", "NextQuestion")
                        .WithMany()
                        .HasForeignKey("NextQuestionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("NextQuestion");
                });

            modelBuilder.Entity("DataLayer.Dals.UserApplicationDal", b =>
                {
                    b.HasOne("Shared.Models.Question", "LastQuestion")
                        .WithMany()
                        .HasForeignKey("LastQuestionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataLayer.Dals.VacancyDal", "Vacation")
                        .WithMany("Applications")
                        .HasForeignKey("VacationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LastQuestion");

                    b.Navigation("Vacation");
                });

            modelBuilder.Entity("DataLayer.Dals.VacancyDal", b =>
                {
                    b.HasOne("DataLayer.Dals.QuestionDal", "RootQuestion")
                        .WithMany()
                        .HasForeignKey("RootQuestionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("RootQuestion");
                });

            modelBuilder.Entity("Shared.Models.Condition", b =>
                {
                    b.HasOne("Shared.Models.Question", null)
                        .WithMany("Conditions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Dals.QuestionDal", b =>
                {
                    b.Navigation("Conditions");
                });

            modelBuilder.Entity("DataLayer.Dals.UserApplicationDal", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("DataLayer.Dals.VacancyDal", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("Shared.Models.Question", b =>
                {
                    b.Navigation("Conditions");
                });
#pragma warning restore 612, 618
        }
    }
}
